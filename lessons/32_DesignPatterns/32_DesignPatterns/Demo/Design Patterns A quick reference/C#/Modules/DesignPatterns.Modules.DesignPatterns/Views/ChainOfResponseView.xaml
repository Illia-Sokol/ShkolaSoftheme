<UserControl x:Class="DesignPatterns.Modules.Views.ChainOfResponseView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             Height="768" Width="900">
    <Grid>
        <TabControl Background="Transparent" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Stretch">
            <TabItem Header="Chain Of Response Pattern" IsSelected="True" Style="{StaticResource TabItemStyle}" Background="Transparent" >
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="0" Text="Model Name :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="0" Text="Price :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="0" Text="Warranty :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="1" Text="{Binding ModelName}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="1" Text="{Binding Price}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="1" Text="{Binding Warranty}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                </Grid>
            </TabItem>
            <TabItem  Header="Structure Diagram"  Style="{StaticResource TabItemStyle}">
                <Image Source="{StaticResource ChainStructureImage}" VerticalAlignment="Top"/>
            </TabItem>
            <TabItem  Header="Definitions &amp; Motivation" Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph>Intent :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle
                                        the request. Chain the receiving objects and pass the request along the chain until an object handles it.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                        <ListItem>
                            <Paragraph FontWeight="Bold">Motivation :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Consider a context-sensitive help facility for a graphical user interface. The user can obtain help
                                        information on any part of the interface just by clicking on it. The help that's provided depends on the
                                        part of the interface that's selected and its context; for example, a button widget in a dialog box might
                                        have different help information than a similar button in the main window. If no specific help information
                                        exists for that part of the interface, then the help system should display a more general help message
                                        about the immediate context—the dialog box as a whole, for example.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Hence it's natural to organize help information according to its generality—from the most specific to the
                                        most general. Furthermore, it's clear that a help request is handled by one of several user interface
                                        objects; which one depends on the context and how specific the available help is.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        The problem here is that the object that ultimately provides the help isn't known explicitly to the object
                                        (e.g., the button) that initiates the help request. What we need is a way to decouple the button that
                                        initiates the help request from the objects that might provide help information. The Chain of
                                        Responsibility pattern defines how that happens.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        The idea of this pattern is to decouple senders and receivers by giving multiple objects a chance to handle
                                        a request. The request gets passed along a chain of objects until one of them handles it.
                                        In this case, neither aPrintButton nor aPrintDialog handles the request; it stops at anApplication, which
                                        can handle it or ignore it. The client that issued the request has no direct reference to the object that
                                        ultimately fulfills it.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                        <ListItem>
                            <Paragraph FontWeight="Bold">Applicability :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        More than one object may handle a request, and the handler isn't known a priori. The handler
                                        should be ascertained automatically.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        You want to issue a request to one of several objects without specifying the receiver explicitly.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        The set of objects that can handle a request should be specified dynamically.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
            <TabItem Header="Participants"  Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph FontWeight="Bold">Handler :</Paragraph>
                            <List Margin="0" Padding="0" >
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines an interface for handling requests.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        (optional) implements the successor link.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                ConcreteHandler :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                       Handles requests it is responsible for.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Can access its successor.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        If the ConcreteHandler can handle the request, it does so; otherwise it forwards the request
                                        to its successor
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Client :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Initiates the request to a ConcreteHandler object on the chain.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
