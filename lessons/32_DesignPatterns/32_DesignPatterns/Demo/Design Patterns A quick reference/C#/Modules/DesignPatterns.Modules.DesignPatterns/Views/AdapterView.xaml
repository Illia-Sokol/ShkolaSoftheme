<UserControl x:Class="DesignPatterns.Modules.Views.AdapterView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             Height="768" Width="900">
    <Grid>
        <TabControl Background="Transparent" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Stretch">
            <TabItem Header="Adapter Pattern" IsSelected="True" Style="{StaticResource TabItemStyle}" Background="Transparent" >
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="0" Text="Model Name :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="0" Text="Price :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="0" Text="Warranty :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="1" Text="{Binding ModelName}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="1" Text="{Binding Price}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="1" Text="{Binding Warranty}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                </Grid>
            </TabItem>
            <TabItem  Header="Structure Diagram"  Style="{StaticResource TabItemStyle}">
                <Image Source="{StaticResource AdapterStructureImage}" VerticalAlignment="Top"/>
            </TabItem>
            <TabItem  Header="Definitions &amp; Motivation" Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph>Intent :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Convert the interface of a class into another interface clients expect. Adapter lets classes work together that
                                        couldn't otherwise because of incompatible interfaces..
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Also Known as Wrapper
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">Motivation :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Consider for example a drawing editor that lets users draw and arrange graphical elements (lines, polygons, text,
                                        etc.) into pictures and diagrams. The drawing editor's key abstraction is the graphical object, which has an
                                        editable shape and can draw itself. The interface for graphical objects is defined by an abstract class called
                                        Shape. The editor defines a subclass of Shape for each kind of graphical object: a LineShape class for lines, a
                                        PolygonShape class for polygons, and so forth.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Classes for elementary geometric shapes like LineShape and PolygonShape are rather easy to implement,
                                        because their drawing and editing capabilities are inherently limited. But a TextShape subclass that can display
                                        and edit text is considerably more difficult to implement, since even basic text editing involves complicated
                                        screen update and buffer management. Meanwhile, an off-the-shelf user interface toolkit might already provide a
                                        sophisticated TextView class for displaying and editing text. Ideally we'd like to reuse TextView to implement
                                        TextShape, but the toolkit wasn't designed with Shape classes in mind. So we can't use TextView and Shape
                                        objects interchangeably.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        How can existing and unrelated classes like TextView work in an application that expects classes with a
                                        different and incompatible interface? We could change the TextView class so that it conforms to the Shape
                                        interface, but that isn't an option unless we have the toolkit's source code. Even if we did, it wouldn't make sense
                                        to change TextView; the toolkit shouldn't have to adopt domain-specific interfaces just to make one application
                                        work.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">Applicability :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        You want to use an existing class, and its interface does not match the one you need.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        You want to create a reusable class that cooperates with unrelated or unforeseen classes, that is, classes
                                        that don't necessarily have compatible interfaces.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        (object adapter only) you need to use several existing subclasses, but it's impractical to adapt their
                                        interface by subclassing every one. An object adapter can adapt the interface of its parent class..
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
            <TabItem Header="Participants"  Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph FontWeight="Bold">Target :</Paragraph>
                            <List Margin="0" Padding="0" >
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines the domain-specific interface that Client uses.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Client :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Collaborates with objects conforming to the Target interface.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Adaptee :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines an existing interface that needs adapting.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                       
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Adapter :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Adapts the interface of Adaptee to the Target interface.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
