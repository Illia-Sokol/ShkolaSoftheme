<UserControl x:Class="DesignPatterns.Modules.Views.DecoratorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             Height="768" Width="900">
    <Grid>
        <TabControl Background="Transparent" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Stretch">
            <TabItem Header="Decorator Pattern" IsSelected="True" Style="{StaticResource TabItemStyle}" >
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50" />
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="4*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Foreground="White" FontSize="15" Grid.Row="1" Grid.Column="0"  Text="Widget :" 
                               VerticalAlignment="Center" HorizontalAlignment="Right" />
                    <TextBlock  Grid.Row="1" FontSize="15" Margin="20,0,0,0"  Grid.Column="1" TextWrapping="Wrap"  Text="{Binding WidgetDescription}" VerticalAlignment="Center"
                              HorizontalAlignment="Left" />
                    <TextBlock  Grid.Row="2" Grid.Column="0" FontSize="15"   Text=" Total Cost :"
                              HorizontalAlignment="Right" />
                    <TextBlock  Grid.Row="2" Grid.Column="1" Margin="20,0,0,0" FontSize="15"  Text="{Binding WidgetCost }"
                              HorizontalAlignment="Left" />
                </Grid>
            </TabItem>
            <TabItem  Header="Structure Diagram"  Style="{StaticResource TabItemStyle}">
                <Image Source="{StaticResource DecoratorStructureImage}" VerticalAlignment="Top"/>
            </TabItem>
            <TabItem  Header="Definitions &amp; Motivation" Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph>Intent :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing
                                        for extending functionality.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Also Known as Wrapper
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                      

                        <ListItem>
                            <Paragraph FontWeight="Bold">Motivation :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Sometimes we want to add responsibilities to individual objects, not to an entire class. A graphical user interface
                                        toolkit, for example, should let you add properties like borders or behaviors like scrolling to any user interface
                                        component.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        One way to add responsibilities is with inheritance. Inheriting a border from another class puts a border around
                                        every subclass instance. This is inflexible, however, because the choice of border is made statically. A client can't
                                        control how and when to decorate the component with a border.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        A more flexible approach is to enclose the component in another object that adds the border. The enclosing object
                                        is called a decorator. The decorator conforms to the interface of the component it decorates so that its presence is
                                        transparent to the component's clients. The decorator forwards requests to the component and may perform
                                        additional actions (such as drawing a border) before or after forwarding. Transparency lets you nest decorators
                                        recursively, thereby allowing an unlimited number of added responsibilities.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">Applicability :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        To add responsibilities to individual objects dynamically and transparently, that is, without affecting other
                                        objects.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        for responsibilities that can be withdrawn.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        When extension by subclassing is impractical. Sometimes a large number of independent extensions are
                                        possible and would produce an explosion of subclasses to support every combination. Or a class definition
                                        may be hidden or otherwise unavailable for subclassing.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
            <TabItem Header="Participants"  Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph FontWeight="Bold">Component :</Paragraph>
                            <List Margin="0" Padding="0" >
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines the interface for objects that can have responsibilities added to them dynamically.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                ConcreteComponent :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines an object to which additional responsibilities can be attached.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Decorator :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Maintains a reference to a Component object and defines an interface that conforms to Component's
                                        interface.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                ConcreteDecorator :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Adds responsibilities to the component.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
