<UserControl x:Class="DesignPatterns.Modules.Views.FactoryMethodView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             Height="768" Width="900">
    <Grid>
        <TabControl Background="Transparent" BorderThickness="0" BorderBrush="Transparent" HorizontalAlignment="Stretch">
            <TabItem Header="Factory Method Pattern" IsSelected="True" Style="{StaticResource TabItemStyle}" Background="Transparent" >
                <Grid >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                        <RowDefinition Height="35" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="1*"/>
                        <ColumnDefinition Width="2*"/>
                        <ColumnDefinition Width="2*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="0" Text="Model Name :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="0" Text="Price :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="0" Text="Warranty :" HorizontalAlignment="Right" />
                    <TextBlock Foreground="White" Grid.Row="0" Grid.Column="1" Text="{Binding ModelName}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="1" Grid.Column="1" Text="{Binding Price}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                    <TextBlock Foreground="White" Grid.Row="2" Grid.Column="1" Text="{Binding Warranty}" Width="Auto" Margin="10,0,0,0" HorizontalAlignment="Left" />
                </Grid>
            </TabItem>
            <TabItem  Header="Structure Diagram"  Style="{StaticResource TabItemStyle}">
                <Image Source="{StaticResource FactoryStructureImage}" VerticalAlignment="Top"/>
            </TabItem>
            <TabItem  Header="Definitions &amp; Motivation" Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph>Intent :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a
                                        class defer instantiation to subclasses.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph  FontWeight="Bold">
                                        Also known as Virtual Constructor.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                        <ListItem>
                            <Paragraph FontWeight="Bold">Motivation :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Frameworks use abstract classes to define and maintain relationships between objects. A framework is often
                                        responsible for creating these objects as well.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Consider a framework for applications that can present multiple documents to the user. Two key abstractions in this
                                        framework are the classes Application and Document. Both classes are abstract, and clients have to subclass them to
                                        realize their application-specific implementations. To create a drawing application, for example, we define the
                                        classes DrawingApplication and DrawingDocument. The Application class is responsible for managing Documents
                                        and will create them as required—when the user selects Open or New from a menu, for example.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Because the particular Document subclass to instantiate is application-specific, the Application class can't predict
                                        the subclass of Document to instantiate—the Application class only knows when a new document should be created,
                                        not what kind of Document to create. This creates a dilemma: The framework must instantiate classes, but it only
                                        knows about abstract classes, which it cannot instantiate.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        The Factory Method pattern offers a solution. It encapsulates the knowledge of which Document subclass to create
                                        and moves this knowledge out of the framework.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>

                        <ListItem>
                            <Paragraph FontWeight="Bold">Applicability :</Paragraph>
                            <List Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        A class can't anticipate the class of objects it must create.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        A class wants its subclasses to specify the objects it creates
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Classes delegate responsibility to one of several helper subclasses, and you want to localize the knowledge of
                                        which helper subclass is the delegate.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
            <TabItem Header="Participants"  Style="{StaticResource TabItemStyle}">
                <FlowDocument Background="Transparent" ColumnWidth="500">
                    <List MarkerOffset="25" MarkerStyle="Disc">
                        <ListItem>
                            <Paragraph FontWeight="Bold">Product :</Paragraph>
                            <List Margin="0" Padding="0" >
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Defines the interface of objects the factory method creates.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                ConcreteProduct :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Implements the Product interface.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                Creator :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Declares the factory method, which returns an object of type Product. Creator may also define a
                                        default implementation of the factory method that returns a default ConcreteProduct object.
                                    </Paragraph>
                                </ListItem>
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        May call the factory method to create a Product object..
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                        <ListItem>
                            <Paragraph FontWeight="Bold">
                                ConcreteCreator :
                            </Paragraph>
                            <List  Margin="0" Padding="0">
                                <ListItem Margin="40,0,0,0">
                                    <Paragraph>
                                        Overrides the factory method to return an instance of a ConcreteProduct.
                                    </Paragraph>
                                </ListItem>
                            </List>
                        </ListItem>
                    </List>
                </FlowDocument>
            </TabItem>
        </TabControl>
    </Grid>
</UserControl>
